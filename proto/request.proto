syntax = "proto3";
package proto;

option go_package = "github.com/treethought/roc/proto";

enum Verb {
	UNDEFINED = 0;
	SOURCE = 1;
	SINK = 2;
	NEW = 3;
	DELELE = 4;
	EXISTS = 5;
}

message Representation {
	string value = 1;
}

message StringSlice {
	repeated string values = 1;
}

message GroupElement {
	string name = 1;
	uint64 min = 2;
	uint64 max = 3;
	string encoding = 4;
	string regex = 5;
}

message Grammar {
	string base = 1;
	repeated GroupElement groups = 2;
}


message EndpointDefinition {
	string name   = 1; 
	Grammar grammar = 2;
	string cmd = 3;
	string endpoint_type = 4;
	Representation literal = 5;
	Space space = 6;
}

message Space {
	string identifier = 1;
	repeated Space imports = 2;
	repeated EndpointDefinition endpoint_definitions = 3;
}

message MapField {
	string key = 1;
	repeated string value = 2;

}

message Request {
  string identifier = 1;
  Verb verb = 2;
  string representation_class = 3;
  repeated MapField arguments  = 4;
  repeated MapField headers  = 5;
}

message IdentifierResponse {
	string value = 1;

}

message BoolResponse {
	bool value = 1;
}

message Empty {}

message RequestScope {
	repeated Space spaces = 1;
}
message RequestContext {
	Request request = 1;
	RequestScope scope = 3;
}

message InitTransport {
	RequestScope scope = 1;
}

service Dispatcher {
	rpc Dispatch(RequestContext) returns (Representation);
}


service Endpoint {
	rpc Source(RequestContext) returns (Representation);
	rpc Sink(RequestContext) returns (Empty);
	rpc New(RequestContext) returns (IdentifierResponse);
	rpc Delete(RequestContext) returns (BoolResponse);
	rpc Exists(RequestContext) returns (BoolResponse);

}

service Transport {
	rpc Init(InitTransport) returns (Empty);
	/* rpc Evaluate(RequestContext) returns (Representation); */
	rpc Source(RequestContext) returns (Representation);
	rpc Sink(RequestContext) returns (Empty);
	rpc New(RequestContext) returns (IdentifierResponse);
	rpc Delete(RequestContext) returns (BoolResponse);
	rpc Exists(RequestContext) returns (BoolResponse);
}
