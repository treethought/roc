// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DispatcherClient interface {
	Dispatch(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) Dispatch(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error) {
	out := new(Representation)
	err := c.cc.Invoke(ctx, "/proto.Dispatcher/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
// All implementations must embed UnimplementedDispatcherServer
// for forward compatibility
type DispatcherServer interface {
	Dispatch(context.Context, *RequestContext) (*Representation, error)
	mustEmbedUnimplementedDispatcherServer()
}

// UnimplementedDispatcherServer must be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (UnimplementedDispatcherServer) Dispatch(context.Context, *RequestContext) (*Representation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedDispatcherServer) mustEmbedUnimplementedDispatcherServer() {}

// UnsafeDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DispatcherServer will
// result in compilation errors.
type UnsafeDispatcherServer interface {
	mustEmbedUnimplementedDispatcherServer()
}

func RegisterDispatcherServer(s grpc.ServiceRegistrar, srv DispatcherServer) {
	s.RegisterService(&Dispatcher_ServiceDesc, srv)
}

func _Dispatcher_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Dispatcher/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).Dispatch(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

// Dispatcher_ServiceDesc is the grpc.ServiceDesc for Dispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _Dispatcher_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/request.proto",
}

// EndpointClient is the client API for Endpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointClient interface {
	Source(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error)
	Sink(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Empty, error)
	New(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*IdentifierResponse, error)
	Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error)
	Exists(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error)
}

type endpointClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointClient(cc grpc.ClientConnInterface) EndpointClient {
	return &endpointClient{cc}
}

func (c *endpointClient) Source(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error) {
	out := new(Representation)
	err := c.cc.Invoke(ctx, "/proto.Endpoint/Source", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) Sink(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Endpoint/Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) New(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, "/proto.Endpoint/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/proto.Endpoint/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *endpointClient) Exists(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/proto.Endpoint/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointServer is the server API for Endpoint service.
// All implementations must embed UnimplementedEndpointServer
// for forward compatibility
type EndpointServer interface {
	Source(context.Context, *RequestContext) (*Representation, error)
	Sink(context.Context, *RequestContext) (*Empty, error)
	New(context.Context, *RequestContext) (*IdentifierResponse, error)
	Delete(context.Context, *RequestContext) (*BoolResponse, error)
	Exists(context.Context, *RequestContext) (*BoolResponse, error)
	mustEmbedUnimplementedEndpointServer()
}

// UnimplementedEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointServer struct {
}

func (UnimplementedEndpointServer) Source(context.Context, *RequestContext) (*Representation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Source not implemented")
}
func (UnimplementedEndpointServer) Sink(context.Context, *RequestContext) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (UnimplementedEndpointServer) New(context.Context, *RequestContext) (*IdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedEndpointServer) Delete(context.Context, *RequestContext) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEndpointServer) Exists(context.Context, *RequestContext) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedEndpointServer) mustEmbedUnimplementedEndpointServer() {}

// UnsafeEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointServer will
// result in compilation errors.
type UnsafeEndpointServer interface {
	mustEmbedUnimplementedEndpointServer()
}

func RegisterEndpointServer(s grpc.ServiceRegistrar, srv EndpointServer) {
	s.RegisterService(&Endpoint_ServiceDesc, srv)
}

func _Endpoint_Source_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Source(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Endpoint/Source",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Source(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Endpoint/Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Sink(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Endpoint/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).New(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Endpoint/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Delete(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Endpoint_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Endpoint/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointServer).Exists(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

// Endpoint_ServiceDesc is the grpc.ServiceDesc for Endpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Endpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Endpoint",
	HandlerType: (*EndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Source",
			Handler:    _Endpoint_Source_Handler,
		},
		{
			MethodName: "Sink",
			Handler:    _Endpoint_Sink_Handler,
		},
		{
			MethodName: "New",
			Handler:    _Endpoint_New_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Endpoint_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Endpoint_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/request.proto",
}

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	Init(ctx context.Context, in *InitTransport, opts ...grpc.CallOption) (*Empty, error)
	// rpc Evaluate(RequestContext) returns (Representation);
	Source(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error)
	Sink(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Empty, error)
	New(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*IdentifierResponse, error)
	Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error)
	Exists(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) Init(ctx context.Context, in *InitTransport, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Transport/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Source(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Representation, error) {
	out := new(Representation)
	err := c.cc.Invoke(ctx, "/proto.Transport/Source", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Sink(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Transport/Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) New(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*IdentifierResponse, error) {
	out := new(IdentifierResponse)
	err := c.cc.Invoke(ctx, "/proto.Transport/New", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Delete(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/proto.Transport/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transportClient) Exists(ctx context.Context, in *RequestContext, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/proto.Transport/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
// All implementations must embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	Init(context.Context, *InitTransport) (*Empty, error)
	// rpc Evaluate(RequestContext) returns (Representation);
	Source(context.Context, *RequestContext) (*Representation, error)
	Sink(context.Context, *RequestContext) (*Empty, error)
	New(context.Context, *RequestContext) (*IdentifierResponse, error)
	Delete(context.Context, *RequestContext) (*BoolResponse, error)
	Exists(context.Context, *RequestContext) (*BoolResponse, error)
	mustEmbedUnimplementedTransportServer()
}

// UnimplementedTransportServer must be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) Init(context.Context, *InitTransport) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedTransportServer) Source(context.Context, *RequestContext) (*Representation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Source not implemented")
}
func (UnimplementedTransportServer) Sink(context.Context, *RequestContext) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sink not implemented")
}
func (UnimplementedTransportServer) New(context.Context, *RequestContext) (*IdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method New not implemented")
}
func (UnimplementedTransportServer) Delete(context.Context, *RequestContext) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransportServer) Exists(context.Context, *RequestContext) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedTransportServer) mustEmbedUnimplementedTransportServer() {}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&Transport_ServiceDesc, srv)
}

func _Transport_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitTransport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Init(ctx, req.(*InitTransport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Source_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Source(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/Source",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Source(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Sink(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_New_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).New(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/New",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).New(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Delete(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transport_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transport/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Exists(ctx, req.(*RequestContext))
	}
	return interceptor(ctx, in, info, handler)
}

// Transport_ServiceDesc is the grpc.ServiceDesc for Transport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _Transport_Init_Handler,
		},
		{
			MethodName: "Source",
			Handler:    _Transport_Source_Handler,
		},
		{
			MethodName: "Sink",
			Handler:    _Transport_Sink_Handler,
		},
		{
			MethodName: "New",
			Handler:    _Transport_New_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Transport_Delete_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _Transport_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/request.proto",
}
